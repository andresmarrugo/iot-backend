#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('iot-backend:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
/**
 * Setting Socket.io
 */
var io = require('socket.io')(server);

require('../routes/events')(io);
//authentication cofig
require('socketio-auth')(io, {
  authenticate: authenticate,
  postAuthenticate: postAuthenticate,
  disconnect: disconnect
});

function authenticate(socket, data, callback) {
  var username = data.username;
  var password = data.password;
  let user=require('../models/user');
  
  user.findOne({username:username}, function(err, user) {
    console.log('dato',user);
    if (err || user === null) return callback(new Error("User not found"));
    return callback(null, user.password == password);
  }); 
  
  console.log('autenticated', username, password );
}

function postAuthenticate(socket, data) {
  var username = data.username;
 console.log("authenticated with", username);
}

function disconnect(socket) {
  console.log(socket.id + ' disconnected');
}


/**
 * Socket.io listenig 
 */


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port,()=>{
  console.log('listening on http://localhost:'+port);
});

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
